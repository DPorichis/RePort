name: Firmware Graybox Scanning

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Prevent cancelling all matrix jobs if one fails
      matrix:
        firmware: [
          "FW_RT_AC5300_300438432738.ZIP",
          "R7000-V1.0.5.64_1.1.88.zip",
          "FW_TV-IP110WN_1.2.2.65.zip",
          "TEW-657BRM_1.00.1.zip",
          "RE450_V1_171215.zip",
          "DCS-8200LH_REVA_FIRMWARE_1.02.03.zip",
          "DIR868LWB1_FW200KR-K05.bin",
          "DIR-868L_fw_revB_2-05b02_eu_multi_20161117.zip",
          "F9K1015_WW_1.00.10.bin",
          "AC1450-V1.0.0.34_10.0.16.zip"
        ]

    name: Scan ${{ matrix.firmware }}
    continue-on-error: true  # Let all scans finish even if one fails

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies and RePort
        run: |
          sudo apt-get update
          sudo apt-get install -y liblzo2-dev

          python -m venv myenv
          source myenv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install gdown


          cd src
          sudo -E ../myenv/bin/python -m RePort.report -install

      - name: Prepare the firmware
        run: |
          source myenv/bin/activate
          FILE_ID=1W6nxlOMDohrG97PvDi9Bfw6zb2sRhu0B
          gdown https://drive.google.com/uc?id=$FILE_ID -O firmwares.zip
          unzip firmwares.zip -d dataset


      - name: Run Graybox Mapping on ${{ matrix.firmware }}
        run: |
          source myenv/bin/activate
          cd src
          sudo -E ../myenv/bin/python -m RePort.report -gray -firmware ../dataset/RePortDataset/${{ matrix.firmware }} -eval
        continue-on-error: true

      - name: Prepare artifacts
        id: find_report
        run: |

          ls -l reports/

          # find the reports directory
          subdir=$(find reports/ -mindepth 1 -maxdepth 1 -type d | grep "${{ matrix.firmware }}")

          # Find RePort.html, and systemcalls.log files and rename them for consistency
          cp "$subdir/RePort.html" ${{ matrix.firmware }}_Report.html
          cp "$subdir/systemcalls.log" ${{ matrix.firmware }}_systemcalls.log
          mv "$subdir/eval.csv" ${{ matrix.firmware }}_eval.csv

      - name: Package the artifacts
        if: always()  # Upload artifacts even if scan failed
        uses: actions/upload-artifact@v4
        with:
          name: scan-${{ matrix.firmware }}
          path: ${{ matrix.firmware }}_Report.html, ${{ matrix.firmware }}_systemcalls.log, ${{ matrix.firmware }}_eval.csv
          if-no-files-found: warn

  combine-results:
    runs-on: ubuntu-latest
    needs: scan
    if: success()

    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: all-scans

      - name: Combine csv results
        run: |
          mkdir combined
          
          output_file="eval_combined.csv"

          echo "FirmwareName, Result, Time, PortCount, InstanceCount, OutwardCount, CVECount, CVEBinariesCount, OutwardCVECount" > "$output_file"
          
          find all-scans/ -type f -name "*_eval.csv" | while read file; do
            echo "Processing $file"
            
            # Append the contents of each eval.csv file to the combined output file
            cat "$file" >> "$output_file"
          done

          zip -r all-scans.zip all-scans/* || echo "No files to zip"

      - name: Upload all-scans ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-scan-results
          path: all-scans.zip

      - name: Upload combined CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: combined-eval-reports
          path: eval_combined.csv